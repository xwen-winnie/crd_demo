/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/xwen-winnie/crd_demo/kube/apis/qbox/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// WaitdeploymentLister helps list Waitdeployments.
// All objects returned here must be treated as read-only.
type WaitdeploymentLister interface {
	// List lists all Waitdeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Waitdeployment, err error)
	// Waitdeployments returns an object that can list and get Waitdeployments.
	Waitdeployments(namespace string) WaitdeploymentNamespaceLister
	WaitdeploymentListerExpansion
}

// waitdeploymentLister implements the WaitdeploymentLister interface.
type waitdeploymentLister struct {
	indexer cache.Indexer
}

// NewWaitdeploymentLister returns a new WaitdeploymentLister.
func NewWaitdeploymentLister(indexer cache.Indexer) WaitdeploymentLister {
	return &waitdeploymentLister{indexer: indexer}
}

// List lists all Waitdeployments in the indexer.
func (s *waitdeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.Waitdeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Waitdeployment))
	})
	return ret, err
}

// Waitdeployments returns an object that can list and get Waitdeployments.
func (s *waitdeploymentLister) Waitdeployments(namespace string) WaitdeploymentNamespaceLister {
	return waitdeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// WaitdeploymentNamespaceLister helps list and get Waitdeployments.
// All objects returned here must be treated as read-only.
type WaitdeploymentNamespaceLister interface {
	// List lists all Waitdeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Waitdeployment, err error)
	// Get retrieves the Waitdeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Waitdeployment, error)
	WaitdeploymentNamespaceListerExpansion
}

// waitdeploymentNamespaceLister implements the WaitdeploymentNamespaceLister
// interface.
type waitdeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Waitdeployments in the indexer for a given namespace.
func (s waitdeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Waitdeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Waitdeployment))
	})
	return ret, err
}

// Get retrieves the Waitdeployment from the indexer for a given namespace and name.
func (s waitdeploymentNamespaceLister) Get(name string) (*v1alpha1.Waitdeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("waitdeployment"), name)
	}
	return obj.(*v1alpha1.Waitdeployment), nil
}
